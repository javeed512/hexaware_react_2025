Images/Assets in ReactJS
========================
We can set images/Asset in ReactJS using two ways.

1)Inside public Folder.

2)Inside src folder.


1)Inside public folder
-----------------------
If we put a file into a public folder,It will not be processed by 
webpack. Instead it will be copied into the build folder untouched.


To reference assets in the public folder, we need to use a special
variable called PUBLIC_URL. Only files inside the public folder will be 
accessible by %PUBLIC_URL% prefix.


How to use image 
-----------------
1)
myapp
|
|---public
	|
	|---pic.jpg

index.html
----------
<img src="%PUBLIC_URL/pic.jpg" alt="mypic"/>

2)
myapp
|
|---public
	|
	|---image
		|
		|--pic.jpg
index.html
----------
<img src="%PUBLIC_URL/image/pic.jpg" alt="mypic"/>


If we want to use Image in Javascript file.

App.js
-------
<img src={process.env.PUBLIC_URL +"/pic.jpg" } />
<img src={process.env.PUBLIC_URL +"/image/pic.jpg" } />

ex:1
-----
index.html
--------
-
-
-
 <div id="root"></div>
<img src="%PUBLIC_URL%/team1.jpeg" alt="mypic"/>
-
-
-
Note:
-----
	Mostly of the time we are displaying images in Component only.
ex:

App.js
------
import React, { Component } from 'react'

export default class App extends Component {
        render() {
                return (
                        <div>
<img src={process.env.PUBLIC_URL+"team1.jpeg"} alt="mypic"></img>    
                        </div>
                )
        }
}

index.js
----------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));

2)Inside src folder
--------------------
we can import a file right in a Javascript module.This tell webpack to 
include that file in the bundle.

How to use 
---------

1)
myapp
|
|---src
	|
	|---pic.jpg
App.js
-----
import pic form "./pic.jpg";
<img src={pic} alt="mypic" />

This ensures that when the project is built.Webpack wil correctly move
the images into the build folder and provide us with correct paths.

ex:
App.js
------
import React, { Component } from 'react'
import pic from "./team1.jpeg";

export default class App extends Component {
        render() {
                return (
                        <div>
                                <img src={pic} alt="mypic"></img>    
                        </div>
                )
        }
}

index.js
---------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));


Bootstrap in React
=================
Single-page applications gaining popularity over the last few years, so many front-end frameworks have introduced such as Angular, React, Vue.js, Ember, etc. As a result, jQuery is not a necessary requirement for building web apps. Today, React has the most used JavaScript framework for building web applications, and Bootstrap become the most popular CSS framework. So, it is necessary to learn various ways in which Bootstrap can be used in React apps, which is the main aim of this section.

Adding Bootstrap for React
We can add Bootstrap to the React app in several ways. The three most common ways are given below:

1)Using the Bootstrap CDN
2)Bootstrap as Dependency
3)React Bootstrap Package

1)Using the Bootstrap CDN
---------------------
It is the easiest way of adding Bootstrap to the React app.

There is no need to install or download Bootstrap. 

We can simply put an <link> into the <head> section of the index.html
 file of the React app as shown in the following snippet.

ex:
----
App.js
--------
import React, { Component } from 'react'

export default class App extends Component {
        render() {
                return (
                        <div>
                            <button>Normal Button</button>    
                            <button class="btn btn-warning">warning Button</button>  
                        </div>
                )
        }
}
index.js
---------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));



index.html
-----------
-
-
-
<head>

 <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">  
</head>
-
-
-


2)Bootstrap as Dependency
-----------------------------
If we are using a build tool or a module bundler such as Webpack, 
then importing Bootstrap as dependency is the preferred option for
 adding Bootstrap to the React application.

 We can install Bootstrap as a dependency for the React app.

 To install the Bootstrap, run the following commands in the 
terminal window.

D:/FirstReact/myapp>npm install bootstrap
		    or 
D:/FirstReact/myapp>npm install bootstrap@4.1.12  (valid version no)

Once Bootstrap is installed, we can import it in the React application 
entry file. If the React project created using the create-react-app tool, 
open the src/index.js file, and add the following code:

ex:
import "../node_modules/bootstrap/dist/css/bootstrap.css";

ex:
App.js
-------
import React, { Component } from 'react'

export default class App extends Component {
        render() {
                return (
                        <div>
                            <button>Normal Button</button>    
                            <button class="btn btn-danger">warning Button</button>  
                        </div>
                )
        }
}

index.js
----------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";
import "../node_modules/bootstrap/dist/css/bootstrap.css";
//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));

index.html
-----------
-
-
-
<div id="root"></div>
-
-
Note:
------
	we can check the bootstrap dependency in package.json file.

3)React Bootstrap Package
---------------------
The React Bootstrap package is the most popular way to add bootstrap
 in the React application.

 There are many Bootstrap packages built by the community, which aim 
to rebuild Bootstrap components as React components.

 The two most popular Bootstrap packages are:

react-bootstrap:
------------------
It is a complete re-implementation of the Bootstrap components 
as React components. It does not need any dependencies like bootstrap.js
or jQuery. 

If the React setup and React-Bootstrap installed, we have everything 
which we need.

ex:
	npm install react-bootstrap bootstrap 

Importing Bootstrap
------------------
Now, open the src/index.js file and add the following code to import 
the Bootstrap file.

ex:

	import 'bootstrap/dist/css/bootstrap.min.css';  


reactstrap: 
-----------
It is a library which contains React Bootstrap 4 components that favor
composition and control. 

It does not depend on jQuery or Bootstrap JavaScript. 

However, react-popper is needed for advanced positioning of content
such as Tooltips, Popovers, and auto-flipping Dropdowns.

ex:
     npm install bootstrap reactstrap

Importing Bootstrap
---------------------
Now, open the src/index.js file and add the following code to import the Bootstrap file.

import 'bootstrap/dist/css/bootstrap.min.css';  


React Forms
============
Forms are an integral part of any modern web application.

 It allows the users to interact with the application as well as
 gather information from the users. 

Forms can perform many tasks that depend on the nature of 
your business requirements and logic such as authentication
 of the user, adding user, searching, filtering, booking, ordering, etc.

 A form can contain text fields, buttons, checkbox, radio button, etc.

Creating Form
------------
React offers a stateful, reactive approach to build a form. 

The component rather than the DOM usually handles the React form.

 In React, the form is usually implemented by using controlled components.

There are mainly two types of form input in React.

1)controlled component
2)UnControlled component


1)Controlled component
------------------------
 In the controlled component, the input form element is handled by the
 component rather than the DOM. Here, the mutable state is kept in the 
state property and will be updated only with setState() method.

Controlled components have functions that govern the data passing
 into them on every onChange event, rather than grabbing the data 
only once, e.g., when you click a submit button. This data is then 
saved to state and updated with setState() method. This makes component
 have better control over the form elements and data.

ex:1
----
App.js
------
import React, { Component } from 'react'

export default class App extends Component {
        render() {
                return (
                        <div>
                           <form>
                            <h2>Controlled by React</h2>
                            <input type="text"/>
                            </form>
                        </div>
                )
        }
}

index.js
---------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));

index.html
---------
-
-
-

   <div id="root"></div>
    <h2>Not Controlled by React</h2>
    <input type="text"/>
-
-
-

ex:2
-----
App.js
-------
import React, { Component } from 'react'

export default class App extends Component {
        render() {
                return (
                        <div>
                           <form>
                            <h2>Controlled by React</h2>
                            <input type="text" value="edx"/>
                            </form>
                        </div>
                )
        }
}

index.js
---------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));


index.html
-----------
-
-
-
 <div id="root"></div>
    <h2>Not Controlled by React</h2>
    <input type="text" value="Global"/>
-
-
-

Note:
------
In above program we will get warning for controlled component.

In above example we can't edit/delete the values because it 
is controlled by react.

To overcome this above program we can use defaultValue attribute
inside App.js file.


App.js
---------
import React, { Component } from 'react'

export default class App extends Component {
        render() {
                return (
                        <div>
                           <form>
                            <h2>Controlled by React</h2>
                            <input type="text" defaultValue="edx"/>
                            </form>
                        </div>
                )
        }
}

Setting the values using state
----------------------------
App.js
-------
import React, { Component } from 'react'

export default class App extends Component {
        state={
                value:"GlobalEdx"
        }
        render() {
                return (
                        <div>
                           <form>
                            <h2>Controlled by React</h2>
                            <input type="text" value={this.state.value}/>
                            </form>
                        </div>
                )
        }
}

index.js
----------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));

index.html
---------
-
-
-
<div id="root"></div>
-
-
Note:
--------
In above program we will get warning message.

To remove that warning message we can use defaultValue attribute or 
onChange attribute.

ex:
App.js
--------
import React, { Component } from 'react'

export default class App extends Component {
        state={
                value:"GlobalEdx"
        }
        handler=()=>
        {
                console.log("changed");
        }
        render() {
                return (
                        <div>
                           <form>
                            <h2>Controlled by React</h2>
 <input type="text" value={this.state.value} onChange={this.handler}/>
                            </form>
                        </div>
                )
        }
}

index.js
---------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));

Note:
-----
	In above program our event will fire if we change the textfield
	value.
ex:
App.js
------
import React, { Component } from 'react'

export default class App extends Component {
        state={
                value:"GlobalEdx"
        }
        handler=(e)=>
        {
                console.log(e.target.value);
        }
        render() {
                return (
                        <div>
                           <form>
                            <h2>Controlled by React</h2>
 <input type="text" value={this.state.value} onChange={this.handler}/>
                            </form>
                        </div>
                )
        }
}

ex:2
----
App.js
--------
import React, { Component } from 'react'

export default class App extends Component {
        state={
                value:"GlobalEdx"
        }
        handler=(e)=>
        {
                console.log(e.target.value);
                this.setState({value:e.target.value});
        }
        render() {
                return (
                        <div>
                           <form>
                            <h2>Controlled by React</h2>
 <input type="text" value={this.state.value} onChange={this.handler}/>
                            </form>
                        </div>
                )
        }
}
Note:
-----
	In above program we are changing our state.

To keep all the inputs in upper case we can use below code.
ex:
App.js
--------
import React, { Component } from 'react'

export default class App extends Component {
        state={
                value:"GlobalEdx"
        }
        handler=(e)=>
        {
                console.log(e.target.value);
                this.setState({value:e.target.value.toUpperCase()});
        }
        render() {
                return (
                        <div>
                           <form>
                            <h2>Controlled by React</h2>
 <input type="text" value={this.state.value} onChange={this.handler}/>
                            </form>
                        </div>
                )
        }
}

To accept only 10 characters as input we can use below code.

ex:3
----
App.js
--------
import React, { Component } from 'react'

export default class App extends Component {
        state={
                value:"GlobalEdx"
        }
        handler=(e)=>
        {
                console.log(e.target.value);
                this.setState({value:e.target.value.toUpperCase().substr(0,10)});
        }
        render() {
                return (
                        <div>
                           <form>
                            <h2>Controlled by React</h2>
 <input type="text" value={this.state.value} onChange={this.handler}/>
                            </form>
                        </div>
                )
        }
}

Controlled component Textarea in ReactJS
--------------------------------------------
ex:
App.js
-----
import React, { Component } from 'react'

export default class App extends Component {
        state={
                value:"Hello Student, This is React Controlled component"
        }
        render() {
                return (
                        <div>
                                <textarea value={this.state.value}></textarea>           
                        </div>
                )
        }
}

index.js
-------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));

Note:
-----
	In Above program ,textarea is read only we can't edit and we can
	see warning message also. 

WE can use onChange attribute to edit the textarea.
ex:
App.js
------
import React, { Component } from 'react'

export default class App extends Component {
        state={
                value:"Hello Student, This is React Controlled component"
        }

        handler=(e)=>
        {
                this.setState({value:e.target.value})
        }
        render() {
                return (
                        <div>
  <textarea value={this.state.value} onChange={this.handler}></textarea>           
                        </div>
                )
        }
}

ex:2
----
App.js
-------
import React, { Component } from 'react'

export default class App extends Component {
        state={
                value:"Hello Student, This is React Controlled component"
        }

        handler=(e)=>
        {
                this.setState({value:e.target.value.substr(0,10)})
        }
        render() {
                return (
                        <div>
  <textarea value={this.state.value} onChange={this.handler}></textarea>           
                        </div>
                )
        }
}

































 












































